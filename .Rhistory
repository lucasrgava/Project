ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = text, x = 10.5^10, y = 0.3, label = '-3.605^7 + (1.361^11)x')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', x = 10.5^10, y = 0.3, label = '-3.605^7 + (1.361^11)x')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 10.5^10, x = 0.3, label = '-3.605^7 + (1.361^11)x')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 10.5^10, x = 0.3, label = '1.361^11 * x - 3.605^7')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '1.361^11 * x - 3.605^7')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '1.361^11 * x - 3.605^7  (R^2 = 1')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '1.361^11 * x - 3.605^7  (R^2 = 1)')
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '1.361^11 * x - 3.605^7  (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
m1
summary(m1)
(1*10^8+3.605^7)/1.361^11
(1*10^8)+(3.605^7)/(1.361^11)
((1*10^8)+(3.605^7))/(1.361^11)
((1*10^8)+(3.605^7))/1.361^11
m1 <- lm(a ~ b)
summary(m1)
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', x = 1*10^11, y = 0.3, label = '2.72^-4 + 7.35^-12 * x  (R^2 = 1)') +
theme_classic() +
labs(y = 'Absorbância (600 nm)', x = "UFC/ml")
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
#annotate(geom = 'text', x = 1*10^11, y = 0.3, label = '2.72^-4 + 7.35^-12 * x  (R^2 = 1)') +
theme_classic() +
labs(y = 'Absorbância (600 nm)', x = "UFC/ml")
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x  (R^2 = 1)') +
theme_classic() +
labs(y = 'Absorbância (600 nm)', x = "UFC/ml")
dados |>
ggplot(aes(a,b)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '(2.72)^-4 + (7.35)^-12 * x  (R^2 = 1)') +
theme_classic() +
labs(y = 'Absorbância (600 nm)', x = "UFC/ml")
summary(m1)
?predict
predict(m1)
ab <- c(0.823, 0.209, 0.05, 0.016, 0.002, 0)
ufc <-  c(1.12*10^11, 2.81*10^10, 7.03*10^9, 1.76*10^9, 4.39*10^8, 1.1*10^8)
cor(a,b)
ab <- c(0.823, 0.209, 0.05, 0.016, 0.002, 0)
ufc <-  c(1.12*10^11, 2.81*10^10, 7.03*10^9, 1.76*10^9, 4.39*10^8, 1.1*10^8)
cor(ab, ufc)
m1 <- lm(ab ~ ufc)
summary(m1)
dados <- data.frame(ab,ufc)
library(tidyverse)
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '0,01827^-4 + 4.023^-11 * x  (R^2 = 1)') +
theme_classic() +
labs(y = 'Absorbância (600 nm)', x = "UFC/ml")
predict(m1)
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '0,01827^-4 + 4.023^-11 * x  (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
summary(m1)
setwd(C:\\Users\\lucas\\OneDrive\\UFV\\2_Periodo\\bac\\relatorio)
setwd('C:\\Users\\lucas\\OneDrive\\UFV\\2_Periodo\\bac\\relatorio')
ggsave(filename = 'regressão.png', device = png, width = 10, height = 10, units = 'cm', dpi = 300)
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
annotate(geom = 'text', y = 9^10, x = 0.3, label = '(R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
annotate(geom = 'text', y = 9^10, x = 0.3, label = '(R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
annotate(geom = 'text', y = 1*10^10, x = 0.3, label = '(R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
ggsave(filename = 'regressão.png', device = png, width = 15, height = 15, units = 'cm', dpi = 300)
dados |>
ggplot(aes(ab,ufc)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
predict(m1)
ggsave(filename = 'regressão.png', device = png, width = 15, height = 15, units = 'cm', dpi = 300)
dados |>
ggplot(aes(ab,ufc)) +
geom_smooth(method = 'lm') +
geom_point() +
annotate(geom = 'text', y = 1*10^11, x = 0.3, label = '2.72^-4 + 7.35^-12 * x   (R^2 = 1)') +
theme_classic() +
labs(x = 'Absorbância (600 nm)', y = "UFC/ml")
predict(m1)
ggsave(filename = 'regressão.png', device = png, width = 15, height = 15, units = 'cm', dpi = 300)
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(ExpDes.pt)
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
dados
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(ExpDes.pt)
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
dados <- dados |>
mutate(sev.med = rowMeans(across(starts_with('sev_f')))) |>
dplyr::select(- starts_with('sev_f')) |>
group_by(treat, block, assessment) |>
summarise(sev_med = mean(sev.med))
dados$sev_med <- round(dados$sev_med, 2)
plot1 <- dados |>
ggplot(aes(x = treat, y = sev_med, color = treat)) +
geom_jitter(width = 0.2, size = 2.5, alpha = 0.7) +
labs(x = ' ', y = 'Severidade (%)', color = ' ') +
theme_classic() +
theme(axis.text.x = element_blank(), text = element_text(size = 15)) +
ylim(0, 100) +
geom_hline(yintercept = max(dados$sev_med), linetype = 3) +
annotate(geom = 'text', y = 15, x = 4, label = '12%')
plot1
plot2 <- dados |>
group_by(treat, assessment) |>
summarise(med = mean(sev_med)) |>
ggplot(aes(x = assessment, y = med, color = treat)) +
geom_point() +
geom_line(size = 1) +
theme(text = element_text(size = 15)) +
theme_classic() +
labs(x = 'Avaliações', y = 'Severidade média (%)', color = 'Tratamentos')
plot2
dados |>
group_by(treat, assessment) |>
summarise(med = mean(sev_med)) |>
ggplot(aes(x = assessment, y = med)) +
geom_jitter(data = dados, aes(y = sev_med), color = 'gray', alpha = 0.7, width = 0.1) +
geom_line(size = 0.5) +
geom_point(color = 'red') +
theme_clean() +
theme(text = element_text(size = 15), axis.title = element_text(size = 15)) +
facet_wrap(~treat) +
labs(x = 'Avaliações', y = 'Severidade média (%)', color = 'Tratamentos')
aacpd <- dados |>
group_by(treat, block) |>
summarise(aacpd = AUDPC(assessment, sev_med))
knitr::kable(aacpd)
plot3 <- aacpd |>
group_by(treat) |>
summarise(med = mean(aacpd)) |>
ggplot(aes(x = treat, y = med)) +
geom_col(fill = 'lightblue') +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size = 15)) +
labs(x = ' ', y = "AACPD")
plot3
y.max <- dados |>
filter(assessment == 4) |>
dplyr::select(-assessment)
knitr::kable(y.max)
prod <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=1793405925#gid=1793405925')
prod <- prod |>
dplyr::select(treat, block, productivity)
knitr::kable(prod)
plot4 <-  prod |>
group_by(treat) |>
summarise(prod = mean(productivity)) |>
ggplot(aes(treat, prod)) +
geom_col(fill = 'lightblue') +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size = 15)) +
labs(x = ' ', y = "Produtividade (ton/ha)") +
ylim(0, 60)
plot4
m1 <- lm(aacpd ~ treat + block, aacpd)
check_heteroscedasticity(m1)
check_normality(m1)
dbc(y.max$treat, bloco = y.max$block, resp = y.max$sev_med)
knitr::kable(dados2)
library(tidyverse)
library(gsheet)
library(epifitter)
library(lme4)
library(ExpDes.pt)
library(agricolae)
library(AgroR)
library(performance)
# Dados de produtividade
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1KPWFOqs_Cclj3VgiHPxP3zazOmucRVAc/edit?gid=836516162#gid=836516162')
# Dados de severidade
dados2 <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1KPWFOqs_Cclj3VgiHPxP3zazOmucRVAc/edit?gid=1484935950#gid=1484935950')
dados2 <- dados2 |>
mutate(sev.med = rowMeans(across(starts_with('sev_f')))) |>
dplyr::select(- c(9, 10, 11)) |>
group_by(treat, block, assessment) |>
summarise(sev.med = mean(sev.med))
knitr::kable(dados2)
aacpd1 <- dados2 |>
group_by(treat, block) |>
summarise(aacpd = AUDPC(assessment, sev.med))
aacpd <- aacpd1 |>
separate(col = treat, into = c('Fator1', 'Fator2'), sep = ' ')
aacpd2 <- aacpd |>
mutate(Fator2= ifelse(Fator1 == 'TESTEMUNHA', 0, Fator2))
knitr::kable(aacpd2)
y.max1 <- dados2 |>
filter(assessment == 4)
y.max1$sev.med <- round(y.max1$sev.med, 2)
y.max <- y.max1 |>
separate(col = treat, into = c('Fator1', 'Fator2'), sep = ' ')
y.max <- y.max |>
mutate(treat.ad = ifelse(Fator1 == 'TESTEMUNHA', Fator1, NA))
y.max <- y.max |>
mutate(Fator1 = ifelse(Fator1 == 'TESTEMUNHA', NA, Fator1))
knitr::kable(y.max)
y.max.pre <- y.max |>
dplyr::select(-treat.ad, -assessment) |>
mutate(Fator1 = ifelse(is.na(Fator1), 'TESTEMUNHA', Fator1)) |>
mutate(Fator2 = ifelse(is.na(Fator2), 0, Fator2))
knitr::kable(y.max)
m2 <- lm(sev.med ~ Fator1*Fator2 + block, y.max.pre)
check_normality(m2)
check_heteroscedasticity(m2)
knitr::kable(y.max.pre)
y.max.pre <- y.max |>
dplyr::select(-treat.ad, -assessment) |>
mutate(Fator1 = ifelse(is.na(Fator1), 'TESTEMUNHA', Fator1)) |>
mutate(Fator2 = ifelse(is.na(Fator2), 0, Fator2))
knitr::kable(y.max.pre)
m2 <- lm(sev.med ~ Fator1*Fator2 + block, y.max.pre)
check_normality(m2)
check_heteroscedasticity(m2)
fator.y <- y.max |>
filter(!-is.na(Fator1))
treat.ad.y <- y.max |>
filter(!-is.na(treat.ad))
fat2.ad.dbc(fator1 = fator.y$Fator1, fator2 = fator.y$Fator2, bloco = fator.y$block, resp = fator.y$sev.med, respAd = treat.ad.y$sev.med, fac.names = c('Fungicidas', 'Estádios'))
prod.pre <- produtividade |>
dplyr::select(-treat.ad) |>
mutate(Fator1 = ifelse(is.na(Fator1), 'TESTEMUNHA', Fator1)) |>
mutate(Fator2 = ifelse(is.na(Fator2), 0, Fator2))
produtividade <- dados |>
dplyr::select(Fator1, Fator2, treat.ad, block, productivity)
trat.ad <- produtividade |>
filter(treat.ad == 'TESTEMUNHA') |>
dplyr::select(productivity)
fatorial <- produtividade |>
filter(!is.na(Fator1))
prod.pre <- produtividade |>
dplyr::select(-treat.ad) |>
mutate(Fator1 = ifelse(is.na(Fator1), 'TESTEMUNHA', Fator1)) |>
mutate(Fator2 = ifelse(is.na(Fator2), 0, Fator2))
knitr::kable(prod.pre)
m3 <- lm(productivity ~ Fator1*Fator2 + block, prod.pre)
check_normality(m3)
check_heteroscedasticity(m3)
fat2.ad.dbc(fator1 = fatorial$Fator1, fator2 = fatorial$Fator2, bloco = fatorial$block, resp = fatorial$productivity, respAd = trat.ad$productivity, fac.names = c('Fungicidas', 'Estádios'))
produtividade2 <- produtividade |>
mutate(Fator1 = ifelse(is.na(Fator1), 'TESTEMUNHA', Fator1 )) |>
unite(col = treat, Fator1, Fator2, sep = ' ', na.rm = TRUE)
dunnett(trat = produtividade2$treat, resp = produtividade2$productivity, control = 'TESTEMUNHA', model = 'DBC', block = produtividade2$block)
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
dados <- dados |>
mutate(sev.med = rowMeans(across(starts_with('sev_f')))) |>
dplyr::select(- starts_with('sev_f')) |>
group_by(treat, block, assessment) |>
summarise(sev_med = mean(sev.med))
dados$sev_med <- round(dados$sev_med, 2)
plot1 <- dados |>
ggplot(aes(x = treat, y = sev_med, color = treat)) +
geom_jitter(width = 0.2, size = 2.5, alpha = 0.7) +
labs(x = ' ', y = 'Severidade (%)', color = ' ') +
theme_classic() +
theme(text = element_text(size = 15), legend.position = 'none') +
ylim(0, 100) +
geom_hline(yintercept = max(dados$sev_med), linetype = 3) +
annotate(geom = 'text', y = 15, x = 4, label = '12%')
plot1
plot2 <- dados |>
group_by(treat, assessment) |>
summarise(med = mean(sev_med)) |>
ggplot(aes(x = assessment, y = med, color = treat)) +
geom_point() +
geom_line(size = 1) +
theme(text = element_text(size = 15)) +
theme_classic() +
labs(x = 'Avaliações', y = 'Severidade média (%)', color = 'Tratamentos')
plot2
dados |>
group_by(treat, assessment) |>
summarise(med = mean(sev_med)) |>
ggplot(aes(x = assessment, y = med)) +
geom_jitter(data = dados, aes(y = sev_med), color = 'gray', alpha = 0.7, width = 0.1) +
geom_line(size = 0.5) +
geom_point(color = 'red') +
theme_clean() +
theme(text = element_text(size = 15), axis.title = element_text(size = 15)) +
facet_wrap(~treat) +
labs(x = 'Avaliações', y = 'Severidade média (%)', color = 'Tratamentos')
aacpd <- dados |>
group_by(treat, block) |>
summarise(aacpd = AUDPC(assessment, sev_med))
knitr::kable(aacpd)
plot3 <- aacpd |>
group_by(treat) |>
summarise(med = mean(aacpd)) |>
ggplot(aes(x = treat, y = med)) +
geom_col(fill = 'lightblue') +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size = 15)) +
labs(x = ' ', y = "AACPD")
plot3
y.max <- dados |>
filter(assessment == 4) |>
dplyr::select(-assessment)
knitr::kable(y.max)
prod <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=1793405925#gid=1793405925')
prod <- prod |>
dplyr::select(treat, block, productivity)
knitr::kable(prod)
plot4 <-  prod |>
group_by(treat) |>
summarise(prod = mean(productivity)) |>
ggplot(aes(treat, prod)) +
geom_col(fill = 'lightblue') +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size = 15)) +
labs(x = ' ', y = "Produtividade (ton/ha)") +
ylim(0, 60)
plot4
m1 <- lm(aacpd ~ treat + block, aacpd)
check_heteroscedasticity(m1)
check_normality(m1)
anova(m1)
cld(emmeans(m1, ~ treat), Letters = letters)
m2 <- lm(sev_med ~ treat + block, y.max)
check_heteroscedasticity(m2)
check_normality(m2)
anova(m2)
cld(emmeans(m2, ~ treat), Letters = letters)
m3 <- lm(productivity ~ treat + block, prod)
check_heteroscedasticity(m3)
check_normality(m3)
anova(m3)
plot2 <- plot2 +
annotate(geom = 'text', x = 4, y = 1.72, label = '*', size = 7) +
annotate(geom = 'text', x = 4, y = 3.6, label = '*', size = 7)
ggplotly(plot2)
plot3 <- plot3 +
annotate(geom = 'text', x = 5, y = 1.7, label = '*', size = 7) +
annotate(geom = 'text', x = 2, y = 3, label = '*', size = 7) +
annotate(geom = 'text', x = 4, y = 3.8, label = '*', size = 7) +
annotate(geom = 'text', x = 1, y = 4, label = '*', size = 7)
ggplotly(plot3)
plot4 <- plot4 +
annotate(geom = 'text', x = 7, y = 49, label = 'ns', size = 5)
ggplotly(plot4)
plot1 <- dados |>
ggplot(aes(x = treat, y = sev_med, color = treat)) +
geom_jitter(width = 0.2, size = 2.5, alpha = 0.7) +
labs(x = ' ', y = 'Severidade (%)', color = ' ') +
theme_classic() +
theme(text = element_text(size = 15), legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1) +
ylim(0, 100) +
geom_hline(yintercept = max(dados$sev_med), linetype = 3) +
annotate(geom = 'text', y = 15, x = 4, label = '12%')
plot1
theme(text = element_text(size = 15), legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1) +
plot1 <- dados |>
ggplot(aes(x = treat, y = sev_med, color = treat)) +
geom_jitter(width = 0.2, size = 2.5, alpha = 0.7) +
labs(x = ' ', y = 'Severidade (%)', color = ' ') +
theme_classic() +
theme(text = element_text(size = 15), legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 100) +
geom_hline(yintercept = max(dados$sev_med), linetype = 3) +
annotate(geom = 'text', y = 15, x = 4, label = '12%')
plot1
library(gsheet) # importação dos dados
library(tidyverse) # manipulação dos dados
library(ggthemes) # Temas gráficos
library(plotly) # gráficos dinâmicos
library(epifitter) # utilizar a função AUDPC()
library(performance) # este e demais pacotes destinados a análise
library(emmeans)
library(multcomp)
dados <- gsheet2tbl('https://docs.google.com/spreadsheets/d/18JYhRvnwob5L0kAOor9o22Y_AwLkD7XU/edit?gid=173826027#gid=173826027')
dados <- dados |>
mutate(sev.med = rowMeans(across(starts_with('sev_f')))) |>
dplyr::select(- starts_with('sev_f')) |>
group_by(treat, block, assessment) |>
summarise(sev_med = mean(sev.med))
dados$sev_med <- round(dados$sev_med, 2)
plot1 <- dados |>
ggplot(aes(x = treat, y = sev_med, color = treat)) +
geom_jitter(width = 0.2, size = 2.5, alpha = 0.7) +
labs(x = ' ', y = 'Severidade (%)', color = ' ') +
theme_classic() +
theme(text = element_text(size = 15), legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 100) +
geom_hline(yintercept = max(dados$sev_med), linetype = 3) +
annotate(geom = 'text', y = 15, x = 4, label = '12%')
plot1
